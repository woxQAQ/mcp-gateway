/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { customInstance } from "../mutator";
export interface BodyImportOpenapiApiV1OpenapiOpenapiImportPost {
  file: Blob;
}

/**
 * The new password of the user
 */
export type ChangePasswordNewPassword = string | null;

/**
 * The old password of the user
 */
export type ChangePasswordOldPassword = string | null;

/**
 * The username of the user
 */
export type ChangePasswordUsername = string | null;

export interface ChangePassword {
  /** The new password of the user */
  new_password?: ChangePasswordNewPassword;
  /** The old password of the user */
  old_password?: ChangePasswordOldPassword;
  /** The username of the user */
  username?: ChangePasswordUsername;
}

export interface Cors {
  allow_credentials: boolean;
  allow_headers: string[];
  allow_methods: string[];
  allow_origins: string[];
  expose_headers: string[];
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface HttpServer {
  description: string;
  name: string;
  tools: string[];
  url: string;
}

/**
 * The password of the user
 */
export type LoginPassword = string | null;

/**
 * The username of the user
 */
export type LoginUsername = string | null;

export interface Login {
  /** The password of the user */
  password?: LoginPassword;
  /** The username of the user */
  username?: LoginUsername;
}

export type McpDeletedAt = string | null;

export type McpUpdatedAt = string | null;

export interface Mcp {
  created_at: string;
  deleted_at: McpDeletedAt;
  http_servers: HttpServer[];
  name: string;
  routers: Router[];
  servers: McpServer[];
  tenant_name: string;
  tools: Tool[];
  updated_at: McpUpdatedAt;
}

export type McpConfigModelDeletedAt = string | null;

export type McpConfigModelGmtDeleted = string | null;

export type McpConfigModelUpdatedAt = string | null;

export interface McpConfigModel {
  created_at: string;
  deleted_at: McpConfigModelDeletedAt;
  gmt_created: string;
  gmt_deleted?: McpConfigModelGmtDeleted;
  gmt_updated: string;
  http_servers: HttpServer[];
  id: string;
  name: string;
  routers: Router[];
  servers: McpServer[];
  tenant_name: string;
  tools: Tool[];
  updated_at: McpConfigModelUpdatedAt;
}

/**
 * MCP config name.
 */
export interface McpConfigName {
  id: string;
  name: string;
  tenant_id: string;
}

export interface McpServer {
  command: string;
  description: string;
  name: string;
  policy: Policy;
  preinstalled: boolean;
  type: McpServerType;
  url: string;
}

export type McpServerType = (typeof McpServerType)[keyof typeof McpServerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const McpServerType = {
  sse: "sse",
  stdio: "stdio",
} as const;

export type Policy = (typeof Policy)[keyof typeof Policy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Policy = {
  on_start: "on_start",
  on_demand: "on_demand",
} as const;

export interface Router {
  cors: Cors;
  http_server_ref: HttpServer;
  prefix: string;
  sse_prefix: string;
}

export type ToolArgsItem = { [key: string]: unknown };

export type ToolHeaders = { [key: string]: string };

export type ToolInputSchema = { [key: string]: unknown };

export interface Tool {
  args: ToolArgsItem[];
  description: string;
  headers: ToolHeaders;
  input_schema: ToolInputSchema;
  method: string;
  name: string;
  path: string;
  request_body: string;
  response_body: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type ListMcpConfigsApiV1McpConfigsGetParams = {
  /**
   * ÁßüÊà∑ID
   */
  tenant_id?: string | null;
};

export type ListMcpConfigNamesApiV1McpConfigsNamesGetParams = {
  /**
   * ÁßüÊà∑ID
   */
  tenant_id?: string | null;
  /**
   * ÊòØÂê¶ÂåÖÂê´Â∑≤Âà†Èô§ÁöÑÈÖçÁΩÆ
   */
  include_deleted?: boolean;
};

/**
 * @summary Login
 */
export type loginApiV1AuthLoginPostResponse200 = {
  data: unknown;
  status: 200;
};

export type loginApiV1AuthLoginPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type loginApiV1AuthLoginPostResponseComposite =
  | loginApiV1AuthLoginPostResponse200
  | loginApiV1AuthLoginPostResponse422;

export type loginApiV1AuthLoginPostResponse =
  loginApiV1AuthLoginPostResponseComposite & {
    headers: Headers;
  };

export const getLoginApiV1AuthLoginPostUrl = () => {
  return `/api/v1/auth/login`;
};

export const loginApiV1AuthLoginPost = async (
  login: Login,
  options?: RequestInit,
): Promise<loginApiV1AuthLoginPostResponse> => {
  return customInstance<loginApiV1AuthLoginPostResponse>(
    getLoginApiV1AuthLoginPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(login),
    },
  );
};

/**
 * @summary Logout
 */
export type logoutApiV1AuthLogoutPostResponse200 = {
  data: unknown;
  status: 200;
};

export type logoutApiV1AuthLogoutPostResponseComposite =
  logoutApiV1AuthLogoutPostResponse200;

export type logoutApiV1AuthLogoutPostResponse =
  logoutApiV1AuthLogoutPostResponseComposite & {
    headers: Headers;
  };

export const getLogoutApiV1AuthLogoutPostUrl = () => {
  return `/api/v1/auth/logout`;
};

export const logoutApiV1AuthLogoutPost = async (
  options?: RequestInit,
): Promise<logoutApiV1AuthLogoutPostResponse> => {
  return customInstance<logoutApiV1AuthLogoutPostResponse>(
    getLogoutApiV1AuthLogoutPostUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Get User
 */
export type getUserApiV1AuthUserGetResponse200 = {
  data: unknown;
  status: 200;
};

export type getUserApiV1AuthUserGetResponseComposite =
  getUserApiV1AuthUserGetResponse200;

export type getUserApiV1AuthUserGetResponse =
  getUserApiV1AuthUserGetResponseComposite & {
    headers: Headers;
  };

export const getGetUserApiV1AuthUserGetUrl = () => {
  return `/api/v1/auth/user`;
};

export const getUserApiV1AuthUserGet = async (
  options?: RequestInit,
): Promise<getUserApiV1AuthUserGetResponse> => {
  return customInstance<getUserApiV1AuthUserGetResponse>(
    getGetUserApiV1AuthUserGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary List Users
 */
export type listUsersApiV1AuthUsersGetResponse200 = {
  data: unknown;
  status: 200;
};

export type listUsersApiV1AuthUsersGetResponseComposite =
  listUsersApiV1AuthUsersGetResponse200;

export type listUsersApiV1AuthUsersGetResponse =
  listUsersApiV1AuthUsersGetResponseComposite & {
    headers: Headers;
  };

export const getListUsersApiV1AuthUsersGetUrl = () => {
  return `/api/v1/auth/users`;
};

export const listUsersApiV1AuthUsersGet = async (
  options?: RequestInit,
): Promise<listUsersApiV1AuthUsersGetResponse> => {
  return customInstance<listUsersApiV1AuthUsersGetResponse>(
    getListUsersApiV1AuthUsersGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Change Password
 */
export type changePasswordApiV1AuthUsersChangePasswordPostResponse200 = {
  data: unknown;
  status: 200;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponseComposite =
  | changePasswordApiV1AuthUsersChangePasswordPostResponse200
  | changePasswordApiV1AuthUsersChangePasswordPostResponse422;

export type changePasswordApiV1AuthUsersChangePasswordPostResponse =
  changePasswordApiV1AuthUsersChangePasswordPostResponseComposite & {
    headers: Headers;
  };

export const getChangePasswordApiV1AuthUsersChangePasswordPostUrl = () => {
  return `/api/v1/auth/users/change-password`;
};

export const changePasswordApiV1AuthUsersChangePasswordPost = async (
  changePassword: ChangePassword,
  options?: RequestInit,
): Promise<changePasswordApiV1AuthUsersChangePasswordPostResponse> => {
  return customInstance<changePasswordApiV1AuthUsersChangePasswordPostResponse>(
    getChangePasswordApiV1AuthUsersChangePasswordPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(changePassword),
    },
  );
};

/**
 * @summary Delete User
 */
export type deleteUserApiV1AuthUsersUserIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponseComposite =
  | deleteUserApiV1AuthUsersUserIdDeleteResponse200
  | deleteUserApiV1AuthUsersUserIdDeleteResponse422;

export type deleteUserApiV1AuthUsersUserIdDeleteResponse =
  deleteUserApiV1AuthUsersUserIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteUserApiV1AuthUsersUserIdDeleteUrl = (userId: string) => {
  return `/api/v1/auth/users/${userId}`;
};

export const deleteUserApiV1AuthUsersUserIdDelete = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUserApiV1AuthUsersUserIdDeleteResponse> => {
  return customInstance<deleteUserApiV1AuthUsersUserIdDeleteResponse>(
    getDeleteUserApiV1AuthUsersUserIdDeleteUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Ëé∑ÂèñMCPÈÖçÁΩÆÂàóË°®
 * @summary List Mcp Configs
 */
export type listMcpConfigsApiV1McpConfigsGetResponse200 = {
  data: McpConfigModel[];
  status: 200;
};

export type listMcpConfigsApiV1McpConfigsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigsApiV1McpConfigsGetResponseComposite =
  | listMcpConfigsApiV1McpConfigsGetResponse200
  | listMcpConfigsApiV1McpConfigsGetResponse422;

export type listMcpConfigsApiV1McpConfigsGetResponse =
  listMcpConfigsApiV1McpConfigsGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigsApiV1McpConfigsGetUrl = (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs?${stringifiedParams}`
    : `/api/v1/mcp/configs`;
};

export const listMcpConfigsApiV1McpConfigsGet = async (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
  options?: RequestInit,
): Promise<listMcpConfigsApiV1McpConfigsGetResponse> => {
  return customInstance<listMcpConfigsApiV1McpConfigsGetResponse>(
    getListMcpConfigsApiV1McpConfigsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÂàõÂª∫MCPÈÖçÁΩÆ
 * @summary Create Mcp Config
 */
export type createMcpConfigApiV1McpConfigsPostResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type createMcpConfigApiV1McpConfigsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createMcpConfigApiV1McpConfigsPostResponseComposite =
  | createMcpConfigApiV1McpConfigsPostResponse200
  | createMcpConfigApiV1McpConfigsPostResponse422;

export type createMcpConfigApiV1McpConfigsPostResponse =
  createMcpConfigApiV1McpConfigsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateMcpConfigApiV1McpConfigsPostUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const createMcpConfigApiV1McpConfigsPost = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<createMcpConfigApiV1McpConfigsPostResponse> => {
  return customInstance<createMcpConfigApiV1McpConfigsPostResponse>(
    getCreateMcpConfigApiV1McpConfigsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * Êõ¥Êñ∞MCPÈÖçÁΩÆ
 * @summary Update Mcp Config
 */
export type updateMcpConfigApiV1McpConfigsPutResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type updateMcpConfigApiV1McpConfigsPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateMcpConfigApiV1McpConfigsPutResponseComposite =
  | updateMcpConfigApiV1McpConfigsPutResponse200
  | updateMcpConfigApiV1McpConfigsPutResponse422;

export type updateMcpConfigApiV1McpConfigsPutResponse =
  updateMcpConfigApiV1McpConfigsPutResponseComposite & {
    headers: Headers;
  };

export const getUpdateMcpConfigApiV1McpConfigsPutUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const updateMcpConfigApiV1McpConfigsPut = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<updateMcpConfigApiV1McpConfigsPutResponse> => {
  return customInstance<updateMcpConfigApiV1McpConfigsPutResponse>(
    getUpdateMcpConfigApiV1McpConfigsPutUrl(),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * Ëé∑ÂèñMCPÈÖçÁΩÆÂêçÁß∞ÂàóË°®
 * @summary List Mcp Config Names
 */
export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse200 = {
  data: McpConfigName[];
  status: 200;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite =
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse200
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse422;

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse =
  listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigNamesApiV1McpConfigsNamesGetUrl = (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs/names?${stringifiedParams}`
    : `/api/v1/mcp/configs/names`;
};

export const listMcpConfigNamesApiV1McpConfigsNamesGet = async (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
  options?: RequestInit,
): Promise<listMcpConfigNamesApiV1McpConfigsNamesGetResponse> => {
  return customInstance<listMcpConfigNamesApiV1McpConfigsNamesGetResponse>(
    getListMcpConfigNamesApiV1McpConfigsNamesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÂêåÊ≠•MCPÈÖçÁΩÆ
 * @summary Sync Mcp Config
 */
export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200 = {
  data: unknown;
  status: 200;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite =
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422;

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse =
  syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite & {
    headers: Headers;
  };

export const getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl = (
  configId: string,
) => {
  return `/api/v1/mcp/configs/${configId}/sync`;
};

export const syncMcpConfigApiV1McpConfigsConfigIdSyncPost = async (
  configId: string,
  options?: RequestInit,
): Promise<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse> => {
  return customInstance<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse>(
    getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl(configId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * Âà†Èô§MCPÈÖçÁΩÆ
 * @summary Delete Mcp Config
 */
export type deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponseComposite =
  | deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse200
  | deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse422;

export type deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse =
  deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteMcpConfigApiV1McpConfigsTenantIdNameDeleteUrl = (
  tenantId: string,
  name: string,
) => {
  return `/api/v1/mcp/configs/${tenantId}/${name}`;
};

export const deleteMcpConfigApiV1McpConfigsTenantIdNameDelete = async (
  tenantId: string,
  name: string,
  options?: RequestInit,
): Promise<deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse> => {
  return customInstance<deleteMcpConfigApiV1McpConfigsTenantIdNameDeleteResponse>(
    getDeleteMcpConfigApiV1McpConfigsTenantIdNameDeleteUrl(tenantId, name),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * ÊøÄÊ¥ªMCPÈÖçÁΩÆ
 * @summary Active Mcp Config
 */
export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse200 = {
  data: unknown;
  status: 200;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite =
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse200
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse422;

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse =
  activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite & {
    headers: Headers;
  };

export const getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl = (
  tenantName: string,
  name: string,
) => {
  return `/api/v1/mcp/${tenantName}/${name}/active`;
};

export const activeMcpConfigApiV1McpTenantNameNameActivePost = async (
  tenantName: string,
  name: string,
  options?: RequestInit,
): Promise<activeMcpConfigApiV1McpTenantNameNameActivePostResponse> => {
  return customInstance<activeMcpConfigApiV1McpTenantNameNameActivePostResponse>(
    getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl(tenantName, name),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Import Openapi
 */
export type importOpenapiApiV1OpenapiOpenapiImportPostResponse200 = {
  data: unknown;
  status: 200;
};

export type importOpenapiApiV1OpenapiOpenapiImportPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type importOpenapiApiV1OpenapiOpenapiImportPostResponseComposite =
  | importOpenapiApiV1OpenapiOpenapiImportPostResponse200
  | importOpenapiApiV1OpenapiOpenapiImportPostResponse422;

export type importOpenapiApiV1OpenapiOpenapiImportPostResponse =
  importOpenapiApiV1OpenapiOpenapiImportPostResponseComposite & {
    headers: Headers;
  };

export const getImportOpenapiApiV1OpenapiOpenapiImportPostUrl = () => {
  return `/api/v1/openapi/openapi/import`;
};

export const importOpenapiApiV1OpenapiOpenapiImportPost = async (
  bodyImportOpenapiApiV1OpenapiOpenapiImportPost: BodyImportOpenapiApiV1OpenapiOpenapiImportPost,
  options?: RequestInit,
): Promise<importOpenapiApiV1OpenapiOpenapiImportPostResponse> => {
  const formData = new FormData();
  formData.append(`file`, bodyImportOpenapiApiV1OpenapiOpenapiImportPost.file);

  return customInstance<importOpenapiApiV1OpenapiOpenapiImportPostResponse>(
    getImportOpenapiApiV1OpenapiOpenapiImportPostUrl(),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getListMcpConfigsApiV1McpConfigsGetResponseMock =
  (): McpConfigModel[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      deleted_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      gmt_deleted: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      http_servers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        tools: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      routers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        cors: {
          allow_credentials: faker.datatype.boolean(),
          allow_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_methods: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_origins: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          expose_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        },
        http_server_ref: {
          description: faker.string.alpha({ length: { min: 10, max: 20 } }),
          name: faker.string.alpha({ length: { min: 10, max: 20 } }),
          tools: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          url: faker.string.alpha({ length: { min: 10, max: 20 } }),
        },
        prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      servers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        command: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        policy: faker.helpers.arrayElement(Object.values(Policy)),
        preinstalled: faker.datatype.boolean(),
        type: faker.helpers.arrayElement(Object.values(McpServerType)),
        url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tools: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        args: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({})),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        headers: {
          [faker.string.alphanumeric(5)]: faker.string.alpha({
            length: { min: 10, max: 20 },
          }),
        },
        input_schema: {},
        method: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        path: faker.string.alpha({ length: { min: 10, max: 20 } }),
        request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
        response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      updated_at: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
    }));

export const getCreateMcpConfigApiV1McpConfigsPostResponseMock = (
  overrideResponse: Partial<McpConfigModel> = {},
): McpConfigModel => ({
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  deleted_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_deleted: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  http_servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tools: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  routers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cors: {
      allow_credentials: faker.datatype.boolean(),
      allow_headers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      allow_methods: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      allow_origins: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      expose_headers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    },
    http_server_ref: {
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tools: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    command: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    policy: faker.helpers.arrayElement(Object.values(Policy)),
    preinstalled: faker.datatype.boolean(),
    type: faker.helpers.arrayElement(Object.values(McpServerType)),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tools: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha({
        length: { min: 10, max: 20 },
      }),
    },
    input_schema: {},
    method: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    path: faker.string.alpha({ length: { min: 10, max: 20 } }),
    request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
    response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  ...overrideResponse,
});

export const getUpdateMcpConfigApiV1McpConfigsPutResponseMock = (
  overrideResponse: Partial<McpConfigModel> = {},
): McpConfigModel => ({
  created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  deleted_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_deleted: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  http_servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tools: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  routers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cors: {
      allow_credentials: faker.datatype.boolean(),
      allow_headers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      allow_methods: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      allow_origins: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      expose_headers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    },
    http_server_ref: {
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tools: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
      url: faker.string.alpha({ length: { min: 10, max: 20 } }),
    },
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    command: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    policy: faker.helpers.arrayElement(Object.values(Policy)),
    preinstalled: faker.datatype.boolean(),
    type: faker.helpers.arrayElement(Object.values(McpServerType)),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tools: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha({
        length: { min: 10, max: 20 },
      }),
    },
    input_schema: {},
    method: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    path: faker.string.alpha({ length: { min: 10, max: 20 } }),
    request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
    response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  updated_at: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  ...overrideResponse,
});

export const getListMcpConfigNamesApiV1McpConfigsNamesGetResponseMock =
  (): McpConfigName[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tenant_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getLoginApiV1AuthLoginPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/login", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getLogoutApiV1AuthLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserApiV1AuthUserGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/v1/auth/user", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getListUsersApiV1AuthUsersGetMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.get("*/api/v1/auth/users", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/users/change-password", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/auth/users/:userId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getListMcpConfigsApiV1McpConfigsGetMockHandler = (
  overrideResponse?:
    | McpConfigModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<McpConfigModel[]> | McpConfigModel[]),
) => {
  return http.get("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListMcpConfigsApiV1McpConfigsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateMcpConfigApiV1McpConfigsPostMockHandler = (
  overrideResponse?:
    | McpConfigModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<McpConfigModel> | McpConfigModel),
) => {
  return http.post("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateMcpConfigApiV1McpConfigsPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateMcpConfigApiV1McpConfigsPutMockHandler = (
  overrideResponse?:
    | McpConfigModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<McpConfigModel> | McpConfigModel),
) => {
  return http.put("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMcpConfigApiV1McpConfigsPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListMcpConfigNamesApiV1McpConfigsNamesGetMockHandler = (
  overrideResponse?:
    | McpConfigName[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<McpConfigName[]> | McpConfigName[]),
) => {
  return http.get("*/api/v1/mcp/configs/names", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListMcpConfigNamesApiV1McpConfigsNamesGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/mcp/configs/:configId/sync", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteMcpConfigApiV1McpConfigsTenantIdNameDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/mcp/configs/:tenantId/:name", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getActiveMcpConfigApiV1McpTenantNameNameActivePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/mcp/:tenantName/:name/active", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getImportOpenapiApiV1OpenapiOpenapiImportPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/openapi/openapi/import", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getAPIServerMock = () => [
  getLoginApiV1AuthLoginPostMockHandler(),
  getLogoutApiV1AuthLogoutPostMockHandler(),
  getGetUserApiV1AuthUserGetMockHandler(),
  getListUsersApiV1AuthUsersGetMockHandler(),
  getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler(),
  getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler(),
  getListMcpConfigsApiV1McpConfigsGetMockHandler(),
  getCreateMcpConfigApiV1McpConfigsPostMockHandler(),
  getUpdateMcpConfigApiV1McpConfigsPutMockHandler(),
  getListMcpConfigNamesApiV1McpConfigsNamesGetMockHandler(),
  getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostMockHandler(),
  getDeleteMcpConfigApiV1McpConfigsTenantIdNameDeleteMockHandler(),
  getActiveMcpConfigApiV1McpTenantNameNameActivePostMockHandler(),
  getImportOpenapiApiV1OpenapiOpenapiImportPostMockHandler(),
];

/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import type {
  BodyImportOpenapiApiV1OpenapiOpenapiImportPost,
  ChangePassword,
  HTTPValidationError,
  ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
  ListMcpConfigsApiV1McpConfigsGetParams,
  ListTenantsApiV1TenantTenantsGetParams,
  Login,
  Mcp,
  McpConfigModel,
  McpConfigName,
  Register,
  TenantCreate,
  TenantList,
  TenantModel,
  TenantStatusUpdate,
  TenantUpdate,
  UserList,
  UserModel,
  UserStatusUpdate,
} from "../types";

import { customInstance } from "../../mutator";

/**
 * @summary Login
 */
export type loginApiV1AuthLoginPostResponse200 = {
  data: unknown;
  status: 200;
};

export type loginApiV1AuthLoginPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type loginApiV1AuthLoginPostResponseComposite =
  | loginApiV1AuthLoginPostResponse200
  | loginApiV1AuthLoginPostResponse422;

export type loginApiV1AuthLoginPostResponse =
  loginApiV1AuthLoginPostResponseComposite & {
    headers: Headers;
  };

export const getLoginApiV1AuthLoginPostUrl = () => {
  return `/api/v1/auth/login`;
};

export const loginApiV1AuthLoginPost = async (
  login: Login,
  options?: RequestInit,
): Promise<loginApiV1AuthLoginPostResponse> => {
  return customInstance<loginApiV1AuthLoginPostResponse>(
    getLoginApiV1AuthLoginPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(login),
    },
  );
};

/**
 * @summary Logout
 */
export type logoutApiV1AuthLogoutPostResponse200 = {
  data: unknown;
  status: 200;
};

export type logoutApiV1AuthLogoutPostResponseComposite =
  logoutApiV1AuthLogoutPostResponse200;

export type logoutApiV1AuthLogoutPostResponse =
  logoutApiV1AuthLogoutPostResponseComposite & {
    headers: Headers;
  };

export const getLogoutApiV1AuthLogoutPostUrl = () => {
  return `/api/v1/auth/logout`;
};

export const logoutApiV1AuthLogoutPost = async (
  options?: RequestInit,
): Promise<logoutApiV1AuthLogoutPostResponse> => {
  return customInstance<logoutApiV1AuthLogoutPostResponse>(
    getLogoutApiV1AuthLogoutPostUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Register
 */
export type registerApiV1AuthRegisterPostResponse200 = {
  data: unknown;
  status: 200;
};

export type registerApiV1AuthRegisterPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type registerApiV1AuthRegisterPostResponseComposite =
  | registerApiV1AuthRegisterPostResponse200
  | registerApiV1AuthRegisterPostResponse422;

export type registerApiV1AuthRegisterPostResponse =
  registerApiV1AuthRegisterPostResponseComposite & {
    headers: Headers;
  };

export const getRegisterApiV1AuthRegisterPostUrl = () => {
  return `/api/v1/auth/register`;
};

export const registerApiV1AuthRegisterPost = async (
  register: Register,
  options?: RequestInit,
): Promise<registerApiV1AuthRegisterPostResponse> => {
  return customInstance<registerApiV1AuthRegisterPostResponse>(
    getRegisterApiV1AuthRegisterPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(register),
    },
  );
};

/**
 * @summary Get User
 */
export type getUserApiV1AuthUserGetResponse200 = {
  data: UserModel;
  status: 200;
};

export type getUserApiV1AuthUserGetResponseComposite =
  getUserApiV1AuthUserGetResponse200;

export type getUserApiV1AuthUserGetResponse =
  getUserApiV1AuthUserGetResponseComposite & {
    headers: Headers;
  };

export const getGetUserApiV1AuthUserGetUrl = () => {
  return `/api/v1/auth/user`;
};

export const getUserApiV1AuthUserGet = async (
  options?: RequestInit,
): Promise<getUserApiV1AuthUserGetResponse> => {
  return customInstance<getUserApiV1AuthUserGetResponse>(
    getGetUserApiV1AuthUserGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary List Users
 */
export type listUsersApiV1AuthUsersGetResponse200 = {
  data: UserList;
  status: 200;
};

export type listUsersApiV1AuthUsersGetResponseComposite =
  listUsersApiV1AuthUsersGetResponse200;

export type listUsersApiV1AuthUsersGetResponse =
  listUsersApiV1AuthUsersGetResponseComposite & {
    headers: Headers;
  };

export const getListUsersApiV1AuthUsersGetUrl = () => {
  return `/api/v1/auth/users`;
};

export const listUsersApiV1AuthUsersGet = async (
  options?: RequestInit,
): Promise<listUsersApiV1AuthUsersGetResponse> => {
  return customInstance<listUsersApiV1AuthUsersGetResponse>(
    getListUsersApiV1AuthUsersGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Change Password
 */
export type changePasswordApiV1AuthUsersChangePasswordPostResponse200 = {
  data: unknown;
  status: 200;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponseComposite =
  | changePasswordApiV1AuthUsersChangePasswordPostResponse200
  | changePasswordApiV1AuthUsersChangePasswordPostResponse422;

export type changePasswordApiV1AuthUsersChangePasswordPostResponse =
  changePasswordApiV1AuthUsersChangePasswordPostResponseComposite & {
    headers: Headers;
  };

export const getChangePasswordApiV1AuthUsersChangePasswordPostUrl = () => {
  return `/api/v1/auth/users/change-password`;
};

export const changePasswordApiV1AuthUsersChangePasswordPost = async (
  changePassword: ChangePassword,
  options?: RequestInit,
): Promise<changePasswordApiV1AuthUsersChangePasswordPostResponse> => {
  return customInstance<changePasswordApiV1AuthUsersChangePasswordPostResponse>(
    getChangePasswordApiV1AuthUsersChangePasswordPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(changePassword),
    },
  );
};

/**
 * @summary Delete User
 */
export type deleteUserApiV1AuthUsersUserIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponseComposite =
  | deleteUserApiV1AuthUsersUserIdDeleteResponse200
  | deleteUserApiV1AuthUsersUserIdDeleteResponse422;

export type deleteUserApiV1AuthUsersUserIdDeleteResponse =
  deleteUserApiV1AuthUsersUserIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteUserApiV1AuthUsersUserIdDeleteUrl = (userId: string) => {
  return `/api/v1/auth/users/${userId}`;
};

export const deleteUserApiV1AuthUsersUserIdDelete = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUserApiV1AuthUsersUserIdDeleteResponse> => {
  return customInstance<deleteUserApiV1AuthUsersUserIdDeleteResponse>(
    getDeleteUserApiV1AuthUsersUserIdDeleteUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * ‰øÆÊîπÁî®Êà∑Áä∂ÊÄÅÔºà‰ªÖÁÆ°ÁêÜÂëòÔºâ
 * @summary Update User Status
 */
export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse200 = {
  data: UserModel;
  status: 200;
};

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponseComposite =
  | updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse200
  | updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse422;

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse =
  updateUserStatusApiV1AuthUsersUserIdStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchUrl = (
  userId: string,
) => {
  return `/api/v1/auth/users/${userId}/status`;
};

export const updateUserStatusApiV1AuthUsersUserIdStatusPatch = async (
  userId: string,
  userStatusUpdate: UserStatusUpdate,
  options?: RequestInit,
): Promise<updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse> => {
  return customInstance<updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse>(
    getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchUrl(userId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userStatusUpdate),
    },
  );
};

/**
 * Ëé∑ÂèñMCPÈÖçÁΩÆÂàóË°®
 * @summary List Mcp Configs
 */
export type listMcpConfigsApiV1McpConfigsGetResponse200 = {
  data: McpConfigModel[];
  status: 200;
};

export type listMcpConfigsApiV1McpConfigsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigsApiV1McpConfigsGetResponseComposite =
  | listMcpConfigsApiV1McpConfigsGetResponse200
  | listMcpConfigsApiV1McpConfigsGetResponse422;

export type listMcpConfigsApiV1McpConfigsGetResponse =
  listMcpConfigsApiV1McpConfigsGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigsApiV1McpConfigsGetUrl = (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs?${stringifiedParams}`
    : `/api/v1/mcp/configs`;
};

export const listMcpConfigsApiV1McpConfigsGet = async (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
  options?: RequestInit,
): Promise<listMcpConfigsApiV1McpConfigsGetResponse> => {
  return customInstance<listMcpConfigsApiV1McpConfigsGetResponse>(
    getListMcpConfigsApiV1McpConfigsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÂàõÂª∫MCPÈÖçÁΩÆ
 * @summary Create Mcp Config
 */
export type createMcpConfigApiV1McpConfigsPostResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type createMcpConfigApiV1McpConfigsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createMcpConfigApiV1McpConfigsPostResponseComposite =
  | createMcpConfigApiV1McpConfigsPostResponse200
  | createMcpConfigApiV1McpConfigsPostResponse422;

export type createMcpConfigApiV1McpConfigsPostResponse =
  createMcpConfigApiV1McpConfigsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateMcpConfigApiV1McpConfigsPostUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const createMcpConfigApiV1McpConfigsPost = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<createMcpConfigApiV1McpConfigsPostResponse> => {
  return customInstance<createMcpConfigApiV1McpConfigsPostResponse>(
    getCreateMcpConfigApiV1McpConfigsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * Êõ¥Êñ∞MCPÈÖçÁΩÆ
 * @summary Update Mcp Config
 */
export type updateMcpConfigApiV1McpConfigsPutResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type updateMcpConfigApiV1McpConfigsPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateMcpConfigApiV1McpConfigsPutResponseComposite =
  | updateMcpConfigApiV1McpConfigsPutResponse200
  | updateMcpConfigApiV1McpConfigsPutResponse422;

export type updateMcpConfigApiV1McpConfigsPutResponse =
  updateMcpConfigApiV1McpConfigsPutResponseComposite & {
    headers: Headers;
  };

export const getUpdateMcpConfigApiV1McpConfigsPutUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const updateMcpConfigApiV1McpConfigsPut = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<updateMcpConfigApiV1McpConfigsPutResponse> => {
  return customInstance<updateMcpConfigApiV1McpConfigsPutResponse>(
    getUpdateMcpConfigApiV1McpConfigsPutUrl(),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * Ëé∑ÂèñMCPÈÖçÁΩÆÂêçÁß∞ÂàóË°®
 * @summary List Mcp Config Names
 */
export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse200 = {
  data: McpConfigName[];
  status: 200;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite =
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse200
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse422;

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse =
  listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigNamesApiV1McpConfigsNamesGetUrl = (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs/names?${stringifiedParams}`
    : `/api/v1/mcp/configs/names`;
};

export const listMcpConfigNamesApiV1McpConfigsNamesGet = async (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
  options?: RequestInit,
): Promise<listMcpConfigNamesApiV1McpConfigsNamesGetResponse> => {
  return customInstance<listMcpConfigNamesApiV1McpConfigsNamesGetResponse>(
    getListMcpConfigNamesApiV1McpConfigsNamesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÂêåÊ≠•MCPÈÖçÁΩÆ
 * @summary Sync Mcp Config
 */
export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200 = {
  data: unknown;
  status: 200;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite =
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422;

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse =
  syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite & {
    headers: Headers;
  };

export const getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl = (
  configId: string,
) => {
  return `/api/v1/mcp/configs/${configId}/sync`;
};

export const syncMcpConfigApiV1McpConfigsConfigIdSyncPost = async (
  configId: string,
  options?: RequestInit,
): Promise<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse> => {
  return customInstance<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse>(
    getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl(configId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * Âà†Èô§MCPÈÖçÁΩÆ
 * @summary Delete Mcp Config
 */
export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponseComposite =

    | deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse200
    | deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse422;

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse =
  deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteUrl = (
  tenantName: string,
  name: string,
) => {
  return `/api/v1/mcp/configs/${tenantName}/${name}`;
};

export const deleteMcpConfigApiV1McpConfigsTenantNameNameDelete = async (
  tenantName: string,
  name: string,
  options?: RequestInit,
): Promise<deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse> => {
  return customInstance<deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse>(
    getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteUrl(tenantName, name),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * ÊøÄÊ¥ªMCPÈÖçÁΩÆ
 * @summary Active Mcp Config
 */
export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse200 = {
  data: unknown;
  status: 200;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite =
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse200
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse422;

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse =
  activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite & {
    headers: Headers;
  };

export const getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl = (
  tenantName: string,
  name: string,
) => {
  return `/api/v1/mcp/${tenantName}/${name}/active`;
};

export const activeMcpConfigApiV1McpTenantNameNameActivePost = async (
  tenantName: string,
  name: string,
  options?: RequestInit,
): Promise<activeMcpConfigApiV1McpTenantNameNameActivePostResponse> => {
  return customInstance<activeMcpConfigApiV1McpTenantNameNameActivePostResponse>(
    getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl(tenantName, name),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Import Openapi
 */
export type importOpenapiApiV1OpenapiOpenapiImportPostResponse200 = {
  data: unknown;
  status: 200;
};

export type importOpenapiApiV1OpenapiOpenapiImportPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type importOpenapiApiV1OpenapiOpenapiImportPostResponseComposite =
  | importOpenapiApiV1OpenapiOpenapiImportPostResponse200
  | importOpenapiApiV1OpenapiOpenapiImportPostResponse422;

export type importOpenapiApiV1OpenapiOpenapiImportPostResponse =
  importOpenapiApiV1OpenapiOpenapiImportPostResponseComposite & {
    headers: Headers;
  };

export const getImportOpenapiApiV1OpenapiOpenapiImportPostUrl = () => {
  return `/api/v1/openapi/openapi/import`;
};

export const importOpenapiApiV1OpenapiOpenapiImportPost = async (
  bodyImportOpenapiApiV1OpenapiOpenapiImportPost: BodyImportOpenapiApiV1OpenapiOpenapiImportPost,
  options?: RequestInit,
): Promise<importOpenapiApiV1OpenapiOpenapiImportPostResponse> => {
  const formData = new FormData();
  formData.append(`file`, bodyImportOpenapiApiV1OpenapiOpenapiImportPost.file);

  return customInstance<importOpenapiApiV1OpenapiOpenapiImportPostResponse>(
    getImportOpenapiApiV1OpenapiOpenapiImportPostUrl(),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

/**
 * Ëé∑ÂèñÁßüÊà∑ÂàóË°®
 * @summary List Tenants
 */
export type listTenantsApiV1TenantTenantsGetResponse200 = {
  data: TenantList;
  status: 200;
};

export type listTenantsApiV1TenantTenantsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listTenantsApiV1TenantTenantsGetResponseComposite =
  | listTenantsApiV1TenantTenantsGetResponse200
  | listTenantsApiV1TenantTenantsGetResponse422;

export type listTenantsApiV1TenantTenantsGetResponse =
  listTenantsApiV1TenantTenantsGetResponseComposite & {
    headers: Headers;
  };

export const getListTenantsApiV1TenantTenantsGetUrl = (
  params?: ListTenantsApiV1TenantTenantsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/tenant/tenants?${stringifiedParams}`
    : `/api/v1/tenant/tenants`;
};

export const listTenantsApiV1TenantTenantsGet = async (
  params?: ListTenantsApiV1TenantTenantsGetParams,
  options?: RequestInit,
): Promise<listTenantsApiV1TenantTenantsGetResponse> => {
  return customInstance<listTenantsApiV1TenantTenantsGetResponse>(
    getListTenantsApiV1TenantTenantsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * ÂàõÂª∫ÁßüÊà∑
 * @summary Create Tenant
 */
export type createTenantApiV1TenantTenantsPostResponse200 = {
  data: TenantModel;
  status: 200;
};

export type createTenantApiV1TenantTenantsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createTenantApiV1TenantTenantsPostResponseComposite =
  | createTenantApiV1TenantTenantsPostResponse200
  | createTenantApiV1TenantTenantsPostResponse422;

export type createTenantApiV1TenantTenantsPostResponse =
  createTenantApiV1TenantTenantsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateTenantApiV1TenantTenantsPostUrl = () => {
  return `/api/v1/tenant/tenants`;
};

export const createTenantApiV1TenantTenantsPost = async (
  tenantCreate: TenantCreate,
  options?: RequestInit,
): Promise<createTenantApiV1TenantTenantsPostResponse> => {
  return customInstance<createTenantApiV1TenantTenantsPostResponse>(
    getCreateTenantApiV1TenantTenantsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(tenantCreate),
    },
  );
};

/**
 * Ê†πÊçÆÂêçÁß∞Ëé∑ÂèñÁßüÊà∑‰ø°ÊÅØ
 * @summary Get Tenant By Name
 */
export type getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse200 = {
  data: TenantModel;
  status: 200;
};

export type getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getTenantByNameApiV1TenantTenantsNameTenantNameGetResponseComposite =

    | getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse200
    | getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse422;

export type getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse =
  getTenantByNameApiV1TenantTenantsNameTenantNameGetResponseComposite & {
    headers: Headers;
  };

export const getGetTenantByNameApiV1TenantTenantsNameTenantNameGetUrl = (
  tenantName: string,
) => {
  return `/api/v1/tenant/tenants/name/${tenantName}`;
};

export const getTenantByNameApiV1TenantTenantsNameTenantNameGet = async (
  tenantName: string,
  options?: RequestInit,
): Promise<getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse> => {
  return customInstance<getTenantByNameApiV1TenantTenantsNameTenantNameGetResponse>(
    getGetTenantByNameApiV1TenantTenantsNameTenantNameGetUrl(tenantName),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Âà†Èô§ÁßüÊà∑
 * @summary Delete Tenant
 */
export type deleteTenantApiV1TenantTenantsTenantIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteTenantApiV1TenantTenantsTenantIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteTenantApiV1TenantTenantsTenantIdDeleteResponseComposite =
  | deleteTenantApiV1TenantTenantsTenantIdDeleteResponse200
  | deleteTenantApiV1TenantTenantsTenantIdDeleteResponse422;

export type deleteTenantApiV1TenantTenantsTenantIdDeleteResponse =
  deleteTenantApiV1TenantTenantsTenantIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteTenantApiV1TenantTenantsTenantIdDeleteUrl = (
  tenantId: string,
) => {
  return `/api/v1/tenant/tenants/${tenantId}`;
};

export const deleteTenantApiV1TenantTenantsTenantIdDelete = async (
  tenantId: string,
  options?: RequestInit,
): Promise<deleteTenantApiV1TenantTenantsTenantIdDeleteResponse> => {
  return customInstance<deleteTenantApiV1TenantTenantsTenantIdDeleteResponse>(
    getDeleteTenantApiV1TenantTenantsTenantIdDeleteUrl(tenantId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * Ëé∑ÂèñÂçï‰∏™ÁßüÊà∑‰ø°ÊÅØ
 * @summary Get Tenant
 */
export type getTenantApiV1TenantTenantsTenantIdGetResponse200 = {
  data: TenantModel;
  status: 200;
};

export type getTenantApiV1TenantTenantsTenantIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getTenantApiV1TenantTenantsTenantIdGetResponseComposite =
  | getTenantApiV1TenantTenantsTenantIdGetResponse200
  | getTenantApiV1TenantTenantsTenantIdGetResponse422;

export type getTenantApiV1TenantTenantsTenantIdGetResponse =
  getTenantApiV1TenantTenantsTenantIdGetResponseComposite & {
    headers: Headers;
  };

export const getGetTenantApiV1TenantTenantsTenantIdGetUrl = (
  tenantId: string,
) => {
  return `/api/v1/tenant/tenants/${tenantId}`;
};

export const getTenantApiV1TenantTenantsTenantIdGet = async (
  tenantId: string,
  options?: RequestInit,
): Promise<getTenantApiV1TenantTenantsTenantIdGetResponse> => {
  return customInstance<getTenantApiV1TenantTenantsTenantIdGetResponse>(
    getGetTenantApiV1TenantTenantsTenantIdGetUrl(tenantId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * Êõ¥Êñ∞ÁßüÊà∑‰ø°ÊÅØ
 * @summary Update Tenant
 */
export type updateTenantApiV1TenantTenantsTenantIdPutResponse200 = {
  data: TenantModel;
  status: 200;
};

export type updateTenantApiV1TenantTenantsTenantIdPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateTenantApiV1TenantTenantsTenantIdPutResponseComposite =
  | updateTenantApiV1TenantTenantsTenantIdPutResponse200
  | updateTenantApiV1TenantTenantsTenantIdPutResponse422;

export type updateTenantApiV1TenantTenantsTenantIdPutResponse =
  updateTenantApiV1TenantTenantsTenantIdPutResponseComposite & {
    headers: Headers;
  };

export const getUpdateTenantApiV1TenantTenantsTenantIdPutUrl = (
  tenantId: string,
) => {
  return `/api/v1/tenant/tenants/${tenantId}`;
};

export const updateTenantApiV1TenantTenantsTenantIdPut = async (
  tenantId: string,
  tenantUpdate: TenantUpdate,
  options?: RequestInit,
): Promise<updateTenantApiV1TenantTenantsTenantIdPutResponse> => {
  return customInstance<updateTenantApiV1TenantTenantsTenantIdPutResponse>(
    getUpdateTenantApiV1TenantTenantsTenantIdPutUrl(tenantId),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(tenantUpdate),
    },
  );
};

/**
 * Êõ¥Êñ∞ÁßüÊà∑ÂêØÁî®Áä∂ÊÄÅ
 * @summary Update Tenant Status
 */
export type updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse200 =
  {
    data: TenantModel;
    status: 200;
  };

export type updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse422 =
  {
    data: HTTPValidationError;
    status: 422;
  };

export type updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseComposite =

    | updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse200
    | updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse422;

export type updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse =
  updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchUrl = (
  tenantId: string,
) => {
  return `/api/v1/tenant/tenants/${tenantId}/status`;
};

export const updateTenantStatusApiV1TenantTenantsTenantIdStatusPatch = async (
  tenantId: string,
  tenantStatusUpdate: TenantStatusUpdate,
  options?: RequestInit,
): Promise<updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse> => {
  return customInstance<updateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponse>(
    getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchUrl(tenantId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(tenantStatusUpdate),
    },
  );
};

/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError,
  ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
  ListMcpConfigsApiV1McpConfigsGetParams,
  Mcp,
  McpConfigModel,
  McpConfigName,
} from "../../types";

import { customInstance } from "../../../mutator";

/**
 * 获取MCP配置列表
 * @summary List Mcp Configs
 */
export type listMcpConfigsApiV1McpConfigsGetResponse200 = {
  data: McpConfigModel[];
  status: 200;
};

export type listMcpConfigsApiV1McpConfigsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigsApiV1McpConfigsGetResponseComposite =
  | listMcpConfigsApiV1McpConfigsGetResponse200
  | listMcpConfigsApiV1McpConfigsGetResponse422;

export type listMcpConfigsApiV1McpConfigsGetResponse =
  listMcpConfigsApiV1McpConfigsGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigsApiV1McpConfigsGetUrl = (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs?${stringifiedParams}`
    : `/api/v1/mcp/configs`;
};

export const listMcpConfigsApiV1McpConfigsGet = async (
  params?: ListMcpConfigsApiV1McpConfigsGetParams,
  options?: RequestInit,
): Promise<listMcpConfigsApiV1McpConfigsGetResponse> => {
  return customInstance<listMcpConfigsApiV1McpConfigsGetResponse>(
    getListMcpConfigsApiV1McpConfigsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 创建MCP配置
 * @summary Create Mcp Config
 */
export type createMcpConfigApiV1McpConfigsPostResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type createMcpConfigApiV1McpConfigsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createMcpConfigApiV1McpConfigsPostResponseComposite =
  | createMcpConfigApiV1McpConfigsPostResponse200
  | createMcpConfigApiV1McpConfigsPostResponse422;

export type createMcpConfigApiV1McpConfigsPostResponse =
  createMcpConfigApiV1McpConfigsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateMcpConfigApiV1McpConfigsPostUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const createMcpConfigApiV1McpConfigsPost = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<createMcpConfigApiV1McpConfigsPostResponse> => {
  return customInstance<createMcpConfigApiV1McpConfigsPostResponse>(
    getCreateMcpConfigApiV1McpConfigsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * 更新MCP配置
 * @summary Update Mcp Config
 */
export type updateMcpConfigApiV1McpConfigsPutResponse200 = {
  data: McpConfigModel;
  status: 200;
};

export type updateMcpConfigApiV1McpConfigsPutResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateMcpConfigApiV1McpConfigsPutResponseComposite =
  | updateMcpConfigApiV1McpConfigsPutResponse200
  | updateMcpConfigApiV1McpConfigsPutResponse422;

export type updateMcpConfigApiV1McpConfigsPutResponse =
  updateMcpConfigApiV1McpConfigsPutResponseComposite & {
    headers: Headers;
  };

export const getUpdateMcpConfigApiV1McpConfigsPutUrl = () => {
  return `/api/v1/mcp/configs`;
};

export const updateMcpConfigApiV1McpConfigsPut = async (
  mcp: Mcp,
  options?: RequestInit,
): Promise<updateMcpConfigApiV1McpConfigsPutResponse> => {
  return customInstance<updateMcpConfigApiV1McpConfigsPutResponse>(
    getUpdateMcpConfigApiV1McpConfigsPutUrl(),
    {
      ...options,
      method: "PUT",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(mcp),
    },
  );
};

/**
 * 获取MCP配置名称列表
 * @summary List Mcp Config Names
 */
export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse200 = {
  data: McpConfigName[];
  status: 200;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite =
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse200
  | listMcpConfigNamesApiV1McpConfigsNamesGetResponse422;

export type listMcpConfigNamesApiV1McpConfigsNamesGetResponse =
  listMcpConfigNamesApiV1McpConfigsNamesGetResponseComposite & {
    headers: Headers;
  };

export const getListMcpConfigNamesApiV1McpConfigsNamesGetUrl = (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1/mcp/configs/names?${stringifiedParams}`
    : `/api/v1/mcp/configs/names`;
};

export const listMcpConfigNamesApiV1McpConfigsNamesGet = async (
  params?: ListMcpConfigNamesApiV1McpConfigsNamesGetParams,
  options?: RequestInit,
): Promise<listMcpConfigNamesApiV1McpConfigsNamesGetResponse> => {
  return customInstance<listMcpConfigNamesApiV1McpConfigsNamesGetResponse>(
    getListMcpConfigNamesApiV1McpConfigsNamesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * 同步MCP配置
 * @summary Sync Mcp Config
 */
export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200 = {
  data: unknown;
  status: 200;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite =
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse200
  | syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse422;

export type syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse =
  syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponseComposite & {
    headers: Headers;
  };

export const getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl = (
  configId: string,
) => {
  return `/api/v1/mcp/configs/${configId}/sync`;
};

export const syncMcpConfigApiV1McpConfigsConfigIdSyncPost = async (
  configId: string,
  options?: RequestInit,
): Promise<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse> => {
  return customInstance<syncMcpConfigApiV1McpConfigsConfigIdSyncPostResponse>(
    getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostUrl(configId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * 删除MCP配置
 * @summary Delete Mcp Config
 */
export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponseComposite =

    | deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse200
    | deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse422;

export type deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse =
  deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteUrl = (
  tenantName: string,
  name: string,
) => {
  return `/api/v1/mcp/configs/${tenantName}/${name}`;
};

export const deleteMcpConfigApiV1McpConfigsTenantNameNameDelete = async (
  tenantName: string,
  name: string,
  options?: RequestInit,
): Promise<deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse> => {
  return customInstance<deleteMcpConfigApiV1McpConfigsTenantNameNameDeleteResponse>(
    getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteUrl(tenantName, name),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * 激活MCP配置
 * @summary Active Mcp Config
 */
export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse200 = {
  data: unknown;
  status: 200;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite =
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse200
  | activeMcpConfigApiV1McpTenantNameNameActivePostResponse422;

export type activeMcpConfigApiV1McpTenantNameNameActivePostResponse =
  activeMcpConfigApiV1McpTenantNameNameActivePostResponseComposite & {
    headers: Headers;
  };

export const getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl = (
  tenantName: string,
  name: string,
) => {
  return `/api/v1/mcp/${tenantName}/${name}/active`;
};

export const activeMcpConfigApiV1McpTenantNameNameActivePost = async (
  tenantName: string,
  name: string,
  options?: RequestInit,
): Promise<activeMcpConfigApiV1McpTenantNameNameActivePostResponse> => {
  return customInstance<activeMcpConfigApiV1McpTenantNameNameActivePostResponse>(
    getActiveMcpConfigApiV1McpTenantNameNameActivePostUrl(tenantName, name),
    {
      ...options,
      method: "POST",
    },
  );
};

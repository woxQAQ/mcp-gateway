/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import { McpServerType, Policy } from "../types";
import type {
  McpConfigModel,
  McpConfigName,
  TenantList,
  TenantModel,
  UserList,
  UserModel,
} from "../types";

export const getGetUserApiV1AuthUserGetResponseMock = (
  overrideResponse: Partial<UserModel> = {},
): UserModel => ({
  date_joined: `${faker.date.past().toISOString().split(".")[0]}Z`,
  email: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  is_staff: faker.datatype.boolean(),
  is_superuser: faker.datatype.boolean(),
  is_verified: faker.datatype.boolean(),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getListUsersApiV1AuthUsersGetResponseMock = (
  overrideResponse: Partial<UserList> = {},
): UserList => ({
  page_result: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        count: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        page_number: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        page_size: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  total: faker.number.int({ min: undefined, max: undefined }),
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date_joined: `${faker.date.past().toISOString().split(".")[0]}Z`,
    email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
});

export const getListMcpConfigsApiV1McpConfigsGetResponseMock =
  (): McpConfigModel[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
      gmt_deleted: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
      http_servers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        tools: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      routers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        cors: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            {
              allow_credentials: faker.datatype.boolean(),
              allow_headers: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              allow_methods: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              allow_origins: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
              expose_headers: Array.from(
                { length: faker.number.int({ min: 1, max: 10 }) },
                (_, i) => i + 1,
              ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
            },
            null,
          ]),
          undefined,
        ]),
        prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
        server: faker.string.alpha({ length: { min: 10, max: 20 } }),
        sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      servers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        args: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        command: faker.string.alpha({ length: { min: 10, max: 20 } }),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        policy: faker.helpers.arrayElement(Object.values(Policy)),
        preinstalled: faker.datatype.boolean(),
        type: faker.helpers.arrayElement(Object.values(McpServerType)),
        url: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
      tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tools: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        args: Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({})),
        description: faker.string.alpha({ length: { min: 10, max: 20 } }),
        headers: {
          [faker.string.alphanumeric(5)]: faker.string.alpha({
            length: { min: 10, max: 20 },
          }),
        },
        input_schema: {},
        method: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        path: faker.string.alpha({ length: { min: 10, max: 20 } }),
        request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
        response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
      })),
    }));

export const getCreateMcpConfigApiV1McpConfigsPostResponseMock = (
  overrideResponse: Partial<McpConfigModel> = {},
): McpConfigModel => ({
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_deleted: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  http_servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tools: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  routers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cors: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          allow_credentials: faker.datatype.boolean(),
          allow_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_methods: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_origins: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          expose_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        },
        null,
      ]),
      undefined,
    ]),
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    server: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    command: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    policy: faker.helpers.arrayElement(Object.values(Policy)),
    preinstalled: faker.datatype.boolean(),
    type: faker.helpers.arrayElement(Object.values(McpServerType)),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tools: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha({
        length: { min: 10, max: 20 },
      }),
    },
    input_schema: {},
    method: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    path: faker.string.alpha({ length: { min: 10, max: 20 } }),
    request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
    response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
});

export const getUpdateMcpConfigApiV1McpConfigsPutResponseMock = (
  overrideResponse: Partial<McpConfigModel> = {},
): McpConfigModel => ({
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_deleted: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  http_servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tools: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  routers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cors: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        {
          allow_credentials: faker.datatype.boolean(),
          allow_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_methods: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          allow_origins: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
          expose_headers: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
        },
        null,
      ]),
      undefined,
    ]),
    prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
    server: faker.string.alpha({ length: { min: 10, max: 20 } }),
    sse_prefix: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  servers: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    command: faker.string.alpha({ length: { min: 10, max: 20 } }),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    policy: faker.helpers.arrayElement(Object.values(Policy)),
    preinstalled: faker.datatype.boolean(),
    type: faker.helpers.arrayElement(Object.values(McpServerType)),
    url: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  tools: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    args: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({})),
    description: faker.string.alpha({ length: { min: 10, max: 20 } }),
    headers: {
      [faker.string.alphanumeric(5)]: faker.string.alpha({
        length: { min: 10, max: 20 },
      }),
    },
    input_schema: {},
    method: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    path: faker.string.alpha({ length: { min: 10, max: 20 } }),
    request_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
    response_body: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
});

export const getListMcpConfigNamesApiV1McpConfigsNamesGetResponseMock =
  (): McpConfigName[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      tenant_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    }));

export const getListTenantsApiV1TenantTenantsGetResponseMock = (
  overrideResponse: Partial<TenantList> = {},
): TenantList => ({
  tenants: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getCreateTenantApiV1TenantTenantsPostResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTenantByNameApiV1TenantTenantsNameTenantNameGetResponseMock =
  (overrideResponse: Partial<TenantModel> = {}): TenantModel => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  });

export const getGetTenantApiV1TenantTenantsTenantIdGetResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTenantApiV1TenantTenantsTenantIdPutResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseMock =
  (overrideResponse: Partial<TenantModel> = {}): TenantModel => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  });

export const getLoginApiV1AuthLoginPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/login", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getLogoutApiV1AuthLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRegisterApiV1AuthRegisterPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/register", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserApiV1AuthUserGetMockHandler = (
  overrideResponse?:
    | UserModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserModel> | UserModel),
) => {
  return http.get("*/api/v1/auth/user", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserApiV1AuthUserGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListUsersApiV1AuthUsersGetMockHandler = (
  overrideResponse?:
    | UserList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserList> | UserList),
) => {
  return http.get("*/api/v1/auth/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListUsersApiV1AuthUsersGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/users/change-password", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/auth/users/:userId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getListMcpConfigsApiV1McpConfigsGetMockHandler = (
  overrideResponse?:
    | McpConfigModel[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<McpConfigModel[]> | McpConfigModel[]),
) => {
  return http.get("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListMcpConfigsApiV1McpConfigsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateMcpConfigApiV1McpConfigsPostMockHandler = (
  overrideResponse?:
    | McpConfigModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<McpConfigModel> | McpConfigModel),
) => {
  return http.post("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateMcpConfigApiV1McpConfigsPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateMcpConfigApiV1McpConfigsPutMockHandler = (
  overrideResponse?:
    | McpConfigModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<McpConfigModel> | McpConfigModel),
) => {
  return http.put("*/api/v1/mcp/configs", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateMcpConfigApiV1McpConfigsPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListMcpConfigNamesApiV1McpConfigsNamesGetMockHandler = (
  overrideResponse?:
    | McpConfigName[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<McpConfigName[]> | McpConfigName[]),
) => {
  return http.get("*/api/v1/mcp/configs/names", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListMcpConfigNamesApiV1McpConfigsNamesGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/mcp/configs/:configId/sync", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteMockHandler =
  (
    overrideResponse?:
      | unknown
      | ((
          info: Parameters<Parameters<typeof http.delete>[1]>[0],
        ) => Promise<unknown> | unknown),
  ) => {
    return http.delete(
      "*/api/v1/mcp/configs/:tenantName/:name",
      async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
          await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
      },
    );
  };

export const getActiveMcpConfigApiV1McpTenantNameNameActivePostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/mcp/:tenantName/:name/active", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getImportOpenapiApiV1OpenapiOpenapiImportPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/openapi/openapi/import", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getListTenantsApiV1TenantTenantsGetMockHandler = (
  overrideResponse?:
    | TenantList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TenantList> | TenantList),
) => {
  return http.get("*/api/v1/tenant/tenants", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListTenantsApiV1TenantTenantsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateTenantApiV1TenantTenantsPostMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.post("*/api/v1/tenant/tenants", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTenantApiV1TenantTenantsPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTenantByNameApiV1TenantTenantsNameTenantNameGetMockHandler =
  (
    overrideResponse?:
      | TenantModel
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<TenantModel> | TenantModel),
  ) => {
    return http.get(
      "*/api/v1/tenant/tenants/name/:tenantName",
      async (info) => {
        await delay(1000);

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetTenantByNameApiV1TenantTenantsNameTenantNameGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        );
      },
    );
  };

export const getDeleteTenantApiV1TenantTenantsTenantIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetTenantApiV1TenantTenantsTenantIdGetMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.get("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTenantApiV1TenantTenantsTenantIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTenantApiV1TenantTenantsTenantIdPutMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.put("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateTenantApiV1TenantTenantsTenantIdPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchMockHandler =
  (
    overrideResponse?:
      | TenantModel
      | ((
          info: Parameters<Parameters<typeof http.patch>[1]>[0],
        ) => Promise<TenantModel> | TenantModel),
  ) => {
    return http.patch(
      "*/api/v1/tenant/tenants/:tenantId/status",
      async (info) => {
        await delay(1000);

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        );
      },
    );
  };
export const getAPIServerMock = () => [
  getLoginApiV1AuthLoginPostMockHandler(),
  getLogoutApiV1AuthLogoutPostMockHandler(),
  getRegisterApiV1AuthRegisterPostMockHandler(),
  getGetUserApiV1AuthUserGetMockHandler(),
  getListUsersApiV1AuthUsersGetMockHandler(),
  getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler(),
  getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler(),
  getListMcpConfigsApiV1McpConfigsGetMockHandler(),
  getCreateMcpConfigApiV1McpConfigsPostMockHandler(),
  getUpdateMcpConfigApiV1McpConfigsPutMockHandler(),
  getListMcpConfigNamesApiV1McpConfigsNamesGetMockHandler(),
  getSyncMcpConfigApiV1McpConfigsConfigIdSyncPostMockHandler(),
  getDeleteMcpConfigApiV1McpConfigsTenantNameNameDeleteMockHandler(),
  getActiveMcpConfigApiV1McpTenantNameNameActivePostMockHandler(),
  getImportOpenapiApiV1OpenapiOpenapiImportPostMockHandler(),
  getListTenantsApiV1TenantTenantsGetMockHandler(),
  getCreateTenantApiV1TenantTenantsPostMockHandler(),
  getGetTenantByNameApiV1TenantTenantsNameTenantNameGetMockHandler(),
  getDeleteTenantApiV1TenantTenantsTenantIdDeleteMockHandler(),
  getGetTenantApiV1TenantTenantsTenantIdGetMockHandler(),
  getUpdateTenantApiV1TenantTenantsTenantIdPutMockHandler(),
  getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchMockHandler(),
];

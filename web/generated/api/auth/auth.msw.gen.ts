/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { UserList, UserModel } from "../../types";

export const getGetUserApiV1AuthUserGetResponseMock = (
  overrideResponse: Partial<UserModel> = {},
): UserModel => ({
  date_joined: `${faker.date.past().toISOString().split(".")[0]}Z`,
  email: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  is_staff: faker.datatype.boolean(),
  is_superuser: faker.datatype.boolean(),
  is_verified: faker.datatype.boolean(),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getListUsersApiV1AuthUsersGetResponseMock = (
  overrideResponse: Partial<UserList> = {},
): UserList => ({
  page_result: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      {
        count: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        page_number: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        page_size: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
      },
      null,
    ]),
    undefined,
  ]),
  total: faker.number.int({ min: undefined, max: undefined }),
  users: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date_joined: `${faker.date.past().toISOString().split(".")[0]}Z`,
    email: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    role: faker.string.alpha({ length: { min: 10, max: 20 } }),
    username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  ...overrideResponse,
});

export const getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchResponseMock = (
  overrideResponse: Partial<UserModel> = {},
): UserModel => ({
  date_joined: `${faker.date.past().toISOString().split(".")[0]}Z`,
  email: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  is_staff: faker.datatype.boolean(),
  is_superuser: faker.datatype.boolean(),
  is_verified: faker.datatype.boolean(),
  role: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getLoginApiV1AuthLoginPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/login", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getLogoutApiV1AuthLogoutPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/logout", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getRegisterApiV1AuthRegisterPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/register", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetUserApiV1AuthUserGetMockHandler = (
  overrideResponse?:
    | UserModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserModel> | UserModel),
) => {
  return http.get("*/api/v1/auth/user", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUserApiV1AuthUserGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getListUsersApiV1AuthUsersGetMockHandler = (
  overrideResponse?:
    | UserList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<UserList> | UserList),
) => {
  return http.get("*/api/v1/auth/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListUsersApiV1AuthUsersGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.post("*/api/v1/auth/users/change-password", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/auth/users/:userId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchMockHandler = (
  overrideResponse?:
    | UserModel
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<UserModel> | UserModel),
) => {
  return http.patch("*/api/v1/auth/users/:userId/status", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getAuthMock = () => [
  getLoginApiV1AuthLoginPostMockHandler(),
  getLogoutApiV1AuthLogoutPostMockHandler(),
  getRegisterApiV1AuthRegisterPostMockHandler(),
  getGetUserApiV1AuthUserGetMockHandler(),
  getListUsersApiV1AuthUsersGetMockHandler(),
  getChangePasswordApiV1AuthUsersChangePasswordPostMockHandler(),
  getDeleteUserApiV1AuthUsersUserIdDeleteMockHandler(),
  getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchMockHandler(),
];

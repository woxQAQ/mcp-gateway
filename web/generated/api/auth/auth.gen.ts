/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import type {
  ChangePassword,
  HTTPValidationError,
  Login,
  Register,
  UserList,
  UserModel,
  UserStatusUpdate,
} from "../../types";

import { customInstance } from "../../../mutator";

/**
 * @summary Login
 */
export type loginApiV1AuthLoginPostResponse200 = {
  data: unknown;
  status: 200;
};

export type loginApiV1AuthLoginPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type loginApiV1AuthLoginPostResponseComposite =
  | loginApiV1AuthLoginPostResponse200
  | loginApiV1AuthLoginPostResponse422;

export type loginApiV1AuthLoginPostResponse =
  loginApiV1AuthLoginPostResponseComposite & {
    headers: Headers;
  };

export const getLoginApiV1AuthLoginPostUrl = () => {
  return `/api/v1/auth/login`;
};

export const loginApiV1AuthLoginPost = async (
  login: Login,
  options?: RequestInit,
): Promise<loginApiV1AuthLoginPostResponse> => {
  return customInstance<loginApiV1AuthLoginPostResponse>(
    getLoginApiV1AuthLoginPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(login),
    },
  );
};

/**
 * @summary Logout
 */
export type logoutApiV1AuthLogoutPostResponse200 = {
  data: unknown;
  status: 200;
};

export type logoutApiV1AuthLogoutPostResponseComposite =
  logoutApiV1AuthLogoutPostResponse200;

export type logoutApiV1AuthLogoutPostResponse =
  logoutApiV1AuthLogoutPostResponseComposite & {
    headers: Headers;
  };

export const getLogoutApiV1AuthLogoutPostUrl = () => {
  return `/api/v1/auth/logout`;
};

export const logoutApiV1AuthLogoutPost = async (
  options?: RequestInit,
): Promise<logoutApiV1AuthLogoutPostResponse> => {
  return customInstance<logoutApiV1AuthLogoutPostResponse>(
    getLogoutApiV1AuthLogoutPostUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Register
 */
export type registerApiV1AuthRegisterPostResponse200 = {
  data: unknown;
  status: 200;
};

export type registerApiV1AuthRegisterPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type registerApiV1AuthRegisterPostResponseComposite =
  | registerApiV1AuthRegisterPostResponse200
  | registerApiV1AuthRegisterPostResponse422;

export type registerApiV1AuthRegisterPostResponse =
  registerApiV1AuthRegisterPostResponseComposite & {
    headers: Headers;
  };

export const getRegisterApiV1AuthRegisterPostUrl = () => {
  return `/api/v1/auth/register`;
};

export const registerApiV1AuthRegisterPost = async (
  register: Register,
  options?: RequestInit,
): Promise<registerApiV1AuthRegisterPostResponse> => {
  return customInstance<registerApiV1AuthRegisterPostResponse>(
    getRegisterApiV1AuthRegisterPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(register),
    },
  );
};

/**
 * @summary Get User
 */
export type getUserApiV1AuthUserGetResponse200 = {
  data: UserModel;
  status: 200;
};

export type getUserApiV1AuthUserGetResponseComposite =
  getUserApiV1AuthUserGetResponse200;

export type getUserApiV1AuthUserGetResponse =
  getUserApiV1AuthUserGetResponseComposite & {
    headers: Headers;
  };

export const getGetUserApiV1AuthUserGetUrl = () => {
  return `/api/v1/auth/user`;
};

export const getUserApiV1AuthUserGet = async (
  options?: RequestInit,
): Promise<getUserApiV1AuthUserGetResponse> => {
  return customInstance<getUserApiV1AuthUserGetResponse>(
    getGetUserApiV1AuthUserGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary List Users
 */
export type listUsersApiV1AuthUsersGetResponse200 = {
  data: UserList;
  status: 200;
};

export type listUsersApiV1AuthUsersGetResponseComposite =
  listUsersApiV1AuthUsersGetResponse200;

export type listUsersApiV1AuthUsersGetResponse =
  listUsersApiV1AuthUsersGetResponseComposite & {
    headers: Headers;
  };

export const getListUsersApiV1AuthUsersGetUrl = () => {
  return `/api/v1/auth/users`;
};

export const listUsersApiV1AuthUsersGet = async (
  options?: RequestInit,
): Promise<listUsersApiV1AuthUsersGetResponse> => {
  return customInstance<listUsersApiV1AuthUsersGetResponse>(
    getListUsersApiV1AuthUsersGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Change Password
 */
export type changePasswordApiV1AuthUsersChangePasswordPostResponse200 = {
  data: unknown;
  status: 200;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type changePasswordApiV1AuthUsersChangePasswordPostResponseComposite =
  | changePasswordApiV1AuthUsersChangePasswordPostResponse200
  | changePasswordApiV1AuthUsersChangePasswordPostResponse422;

export type changePasswordApiV1AuthUsersChangePasswordPostResponse =
  changePasswordApiV1AuthUsersChangePasswordPostResponseComposite & {
    headers: Headers;
  };

export const getChangePasswordApiV1AuthUsersChangePasswordPostUrl = () => {
  return `/api/v1/auth/users/change-password`;
};

export const changePasswordApiV1AuthUsersChangePasswordPost = async (
  changePassword: ChangePassword,
  options?: RequestInit,
): Promise<changePasswordApiV1AuthUsersChangePasswordPostResponse> => {
  return customInstance<changePasswordApiV1AuthUsersChangePasswordPostResponse>(
    getChangePasswordApiV1AuthUsersChangePasswordPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(changePassword),
    },
  );
};

/**
 * @summary Delete User
 */
export type deleteUserApiV1AuthUsersUserIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteUserApiV1AuthUsersUserIdDeleteResponseComposite =
  | deleteUserApiV1AuthUsersUserIdDeleteResponse200
  | deleteUserApiV1AuthUsersUserIdDeleteResponse422;

export type deleteUserApiV1AuthUsersUserIdDeleteResponse =
  deleteUserApiV1AuthUsersUserIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteUserApiV1AuthUsersUserIdDeleteUrl = (userId: string) => {
  return `/api/v1/auth/users/${userId}`;
};

export const deleteUserApiV1AuthUsersUserIdDelete = async (
  userId: string,
  options?: RequestInit,
): Promise<deleteUserApiV1AuthUsersUserIdDeleteResponse> => {
  return customInstance<deleteUserApiV1AuthUsersUserIdDeleteResponse>(
    getDeleteUserApiV1AuthUsersUserIdDeleteUrl(userId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * 修改用户状态（仅管理员）
 * @summary Update User Status
 */
export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse200 = {
  data: UserModel;
  status: 200;
};

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponseComposite =
  | updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse200
  | updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse422;

export type updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse =
  updateUserStatusApiV1AuthUsersUserIdStatusPatchResponseComposite & {
    headers: Headers;
  };

export const getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchUrl = (
  userId: string,
) => {
  return `/api/v1/auth/users/${userId}/status`;
};

export const updateUserStatusApiV1AuthUsersUserIdStatusPatch = async (
  userId: string,
  userStatusUpdate: UserStatusUpdate,
  options?: RequestInit,
): Promise<updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse> => {
  return customInstance<updateUserStatusApiV1AuthUsersUserIdStatusPatchResponse>(
    getUpdateUserStatusApiV1AuthUsersUserIdStatusPatchUrl(userId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userStatusUpdate),
    },
  );
};

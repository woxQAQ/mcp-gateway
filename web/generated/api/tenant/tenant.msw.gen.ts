/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Server
 * OpenAPI spec version: 0.1.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { TenantList, TenantModel } from "../../types";

export const getListTenantsApiV1TenantTenantsGetResponseMock = (
  overrideResponse: Partial<TenantList> = {},
): TenantList => ({
  tenants: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
  })),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getCreateTenantApiV1TenantTenantsPostResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTenantByNameApiV1TenantTenantsNameTenantNameGetResponseMock =
  (overrideResponse: Partial<TenantModel> = {}): TenantModel => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  });

export const getGetTenantApiV1TenantTenantsTenantIdGetResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTenantApiV1TenantTenantsTenantIdPutResponseMock = (
  overrideResponse: Partial<TenantModel> = {},
): TenantModel => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
  gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  is_active: faker.datatype.boolean(),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  prefix: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseMock =
  (overrideResponse: Partial<TenantModel> = {}): TenantModel => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    gmt_created: `${faker.date.past().toISOString().split(".")[0]}Z`,
    gmt_updated: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    is_active: faker.datatype.boolean(),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    prefix: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  });

export const getListTenantsApiV1TenantTenantsGetMockHandler = (
  overrideResponse?:
    | TenantList
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TenantList> | TenantList),
) => {
  return http.get("*/api/v1/tenant/tenants", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListTenantsApiV1TenantTenantsGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateTenantApiV1TenantTenantsPostMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.post("*/api/v1/tenant/tenants", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTenantApiV1TenantTenantsPostResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTenantByNameApiV1TenantTenantsNameTenantNameGetMockHandler =
  (
    overrideResponse?:
      | TenantModel
      | ((
          info: Parameters<Parameters<typeof http.get>[1]>[0],
        ) => Promise<TenantModel> | TenantModel),
  ) => {
    return http.get(
      "*/api/v1/tenant/tenants/name/:tenantName",
      async (info) => {
        await delay(1000);

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getGetTenantByNameApiV1TenantTenantsNameTenantNameGetResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        );
      },
    );
  };

export const getDeleteTenantApiV1TenantTenantsTenantIdDeleteMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<unknown> | unknown),
) => {
  return http.delete("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetTenantApiV1TenantTenantsTenantIdGetMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.get("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTenantApiV1TenantTenantsTenantIdGetResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTenantApiV1TenantTenantsTenantIdPutMockHandler = (
  overrideResponse?:
    | TenantModel
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<TenantModel> | TenantModel),
) => {
  return http.put("*/api/v1/tenant/tenants/:tenantId", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateTenantApiV1TenantTenantsTenantIdPutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchMockHandler =
  (
    overrideResponse?:
      | TenantModel
      | ((
          info: Parameters<Parameters<typeof http.patch>[1]>[0],
        ) => Promise<TenantModel> | TenantModel),
  ) => {
    return http.patch(
      "*/api/v1/tenant/tenants/:tenantId/status",
      async (info) => {
        await delay(1000);

        return new HttpResponse(
          JSON.stringify(
            overrideResponse !== undefined
              ? typeof overrideResponse === "function"
                ? await overrideResponse(info)
                : overrideResponse
              : getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchResponseMock(),
          ),
          { status: 200, headers: { "Content-Type": "application/json" } },
        );
      },
    );
  };
export const getTenantMock = () => [
  getListTenantsApiV1TenantTenantsGetMockHandler(),
  getCreateTenantApiV1TenantTenantsPostMockHandler(),
  getGetTenantByNameApiV1TenantTenantsNameTenantNameGetMockHandler(),
  getDeleteTenantApiV1TenantTenantsTenantIdDeleteMockHandler(),
  getGetTenantApiV1TenantTenantsTenantIdGetMockHandler(),
  getUpdateTenantApiV1TenantTenantsTenantIdPutMockHandler(),
  getUpdateTenantStatusApiV1TenantTenantsTenantIdStatusPatchMockHandler(),
];
